# -*- coding: utf-8 -*-
response.menu = [['Register Person', False, URL('register_person')],
                 ['Register Product', False, URL('register_product')],
                 ['Buy product', False, URL('buy')],
                 ['Manage', False, URL('manage_transactions')]]

@auth.requires_membership('manager')
def register_person():
    # create an insert form from the table
    form = SQLFORM(db.person).process()

    # if form correct perform the insert
    if form.accepted:
        response.flash = 'new record inserted'

    # and get a list of all persons
    #records = SQLTABLE(db().select(db.person.ALL),headers='fieldname:capitalize',truncate=1000)
    records = SQLFORM.grid(db.person,user_signature=False)
    return dict(form=form, records=records)

@auth.requires_membership('manager')
def register_product():
    form = SQLFORM(db.product).process()
    if form.accepted:
        response.flash = 'new record inserted'
    #records = SQLTABLE(db().select(db.product.ALL),
                       #upload = URL('download'), # allows pics preview
                       #headers='fieldname:capitalize')
    #records=SQLFORM.grid(db.product,user_signature=False,fields=[db.product.name,db.product.description])
    records=SQLFORM.grid(db.product,user_signature=False)
    return dict(form=form, records=records)

@auth.requires_membership('manager')
def buy():
    form = SQLFORM.factory(
        Field('buyer_id',requires=IS_IN_DB(db,db.person.id,'%(name)s')),
        Field('product_id',requires=IS_IN_DB(db,db.product.id,'%(name)s')),
        Field('quantity','integer',requires=IS_INT_IN_RANGE(1,100))).process()
    if form.accepted:
        # get previous purchese for same product
        purchase = db((db.purchase.buyer_id == form.vars.buyer_id)&
            (db.purchase.product_id==form.vars.product_id)).select().first()

        if purchase:
            # if list contains a record, update that record
            purchase.update_record(
                quantity = purchase.quantity+form.vars.quantity)
        else:
            # self insert a new record in table
            db.purchase.insert(buyer_id=form.vars.buyer_id,
                               product_id=form.vars.product_id,
                               quantity=form.vars.quantity)
        response.flash = 'product purchased!'
    elif form.errors:
        response.flash = 'invalid values in form!'

    # now get a list of all purchases
    #records = SQLTABLE(db(purchased).select(),truncate=10000,headers='fieldname:capitalize')
    #return dict(form=form, records=records)
    return dict(form=form) 

def download():
    return response.download(request,db)

#@auth.requires_membership('manager')
@auth.requires_login()
def manage_transactions():
    login = auth.user.username
    grid = SQLFORM.smartgrid(db.person,linked_tables=['product','purchase'],
                             user_signature=False)
    mail.send(to=['laurent.chambon@u-bordeaux.fr'],
          subject='hello',
          # If reply_to is omitted, then mail.settings.sender is used
          reply_to='theboss@web2py.com',
          message='hi there !!!!!!!!!')
    return dict(grid=grid,login=login)
